{
  "runtime": "NetCore21",
  "defaultVariables": null,
  "documentGenerator": {
    "fromDocument": {
      "json": "openapi: 3.0.2\ninfo:\n  title: OPEN FXL API\n  description: 'The OPEN FXL API makes it possible to automate the desktop application OPEN FXL via HTTP requests.'\n  version: 1.0.0\n  contact:\n    name: DEOS AG\n    url: http://deos-ag.com\n\nservers:\n  - url: 'http://{host}:{port}/api/v1'\n    description: OPEN FXL application\n    variables:\n      host:\n        default: 'localhost'\n      port:\n        default: '8080'\n\ncomponents:\n  schemas:\n\n    Project:\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        path:\n          type: string\n      required:\n        - id\n        - path\n          \n    Projects:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Project\"\n\n    ProjectInfo:\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        language:\n          type: string\n          enum: [EN, DE, IT, NL, FI]\n        constructionProject:\n          type: string\n        company:\n          type: string\n        programmer:\n          type: string\n        date:\n          type: string\n          format: date\n        utf8:\n          type: boolean\n      required:\n        - name\n        - language\n        - utf8\n\n    Controller:\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        path:\n          type: string\n      required:\n        - id\n        - path\n\n    Controllers:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Controller\"\n\n    ControllerInfo:\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        type:\n          type: string\n          enum: ['OPEN 500 EMS', 'OPEN 600 EMS', 'OPEN 710 EMS', 'OPEN 810 EMS', 'OPEN 820 EMS', 'OPEN 3100 EMS', 'OPEN 4100 EMS']\n        description:\n          type: string\n        ip:\n          type: string\n        subnet:\n          type: string\n        gateway:\n          type: string\n        date:\n          type: string\n          format: date\n        automaticTree:\n          type: boolean\n        library:\n          type: string\n          enum: ['!MACLIB.WIN\\\\V0004', '!MAKBIB.WIN\\\\V0004', '!MAKBIB.WIN\\\\V0005']\n        bacnetWorkflow:\n          type: boolean\n          \n    BuildParameters:\n      properties:\n          debug:\n            type: boolean\n            example: false\n          onlyObj:\n            type: boolean\n            example: false\n\n    FupPage:\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        path:\n          type: string\n      required:\n        - id\n        - path\n\n    FupPages:\n      type: array\n      items:\n        $ref: \"#/components/schemas/FupPage\"\n\n    FupPageInfo:\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        macro:\n          type: boolean\n        macroStatus:\n          type: boolean\n        source:\n          type: string\n        sourceId:\n          type: string\n\n    Definition:\n      properties:\n        key:\n          type: string\n        value:\n          type: string\n        comment:\n          type: string\n        hint:\n          type: string\n      required:\n        - key\n\n    Definitions:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Definition\"\n        \n    Process:\n      properties:\n        id:\n          type: string\n        path:\n          type: string\n      required:\n        - id\n        - path\n        \n    LogEntry:\n      properties:\n        section:\n          type: string\n          pattern: '^[^\\w&\"''<>]+$'\n        function:\n          type: string\n          pattern: '^[^\\w&\"''<>]+$'\n        info:\n          type: string\n\npaths:\n  /projects:\n    get:\n      summary: Returns the list of visible projects in the current workspace.\n      description: Returns the list of visible projects in the current workspace.\n      operationId: GetProjects\n      responses:\n        '200':\n          description: A JSON array of project names.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Projects'\n\n    post:\n      summary: Creates a new project.\n      description: Creates a new project.\n      operationId: CreateProject\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n             $ref: '#/components/schemas/ProjectInfo'\n      responses:\n        '201':\n          description: \"Project successfully created.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProjectInfo'\n        '400':\n          description: \"Project infos contain invalid parameters.\"\n        '500':\n          description: \"Something went wrong while creating the project.\"\n\n  /projects/{projectId}:\n    get:\n      summary: Returns the info for a project.\n      description: Returns the info for a project.\n      operationId: GetProjectInfo\n      parameters:\n        - in: path\n          name: projectId\n          schema:\n            type: string\n          required: true\n          description: Id of project.\n      responses:\n        '200':\n          description: A JSON object with project info.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProjectInfo'\n        '404':\n          description: \"Project with that Id was not found.\"\n        \n    delete:\n      summary: Deletes a project.\n      description: Deletes a project.\n      operationId: DeleteProject\n      parameters:\n        - in: path\n          name: projectId\n          schema:\n            type: string\n          required: true\n          description: Id of project.\n      responses:\n        '200':\n          description: \"Project successfully deleted.\"\n        '404':\n          description: \"Project with that Id was not found.\"\n        '409':\n          description: \"The Project is locked by another task.\"\n        '500':\n          description: \"Something went wrong while deleting the project.\"\n\n  /projects/{projectId}/controllers:\n    get:\n      summary: Returns the list of controllers in a project.\n      description: Returns the list of controllers in a project.\n      operationId: GetControllers\n      parameters:\n        - in: path\n          name: projectId\n          schema:\n            type: string\n          required: true\n          description: Id of project.\n      responses:\n        '200':\n          description: A JSON array with controllers.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Controllers'\n        '404':\n          description: \"Project with that Id was not found.\"\n      \n    post:\n      summary: Creates a new controller.\n      description: Creates a new controller.\n      operationId: CreateController\n      parameters:\n        - in: path\n          name: projectId\n          schema:\n            type: string\n          required: true\n          description: Id of project.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n             $ref: '#/components/schemas/ControllerInfo'\n      responses:\n        '201':\n          description: \"Controller successfully created.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ControllerInfo'\n        '400':\n          description: \"Controller infos contain invalid parameters.\"\n        '404':\n          description: \"Project with that Id was not found.\"\n        '500':\n          description: \"Something went wrong while creating the controller.\"\n\n  /controllers/{controllerId}:\n    get:\n      summary: Returns the info for a controller.\n      description: Returns the info for a controller.\n      operationId: GetControllerInfo\n      parameters:\n        - in: path\n          name: controllerId\n          schema:\n            type: string\n          required: true\n          description: Id of controller.\n      responses:\n        '200':\n          description: A JSON object with project info.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ControllerInfo'\n        '404':\n          description: \"Controller with that Id was not found.\"\n          \n    delete:\n      summary: Deletes a controller.\n      description: Deletes a controller.\n      operationId: DeleteController\n      parameters:\n        - in: path\n          name: controllerId\n          schema:\n            type: string\n          required: true\n          description: Id of controller.\n      responses:\n        '200':\n          description: \"Controller successfully deleted.\"\n        '404':\n          description: \"Controller with that Id was not found.\"\n\n  /controllers/{controllerId}/build:\n    post:\n      summary: Build controller program.\n      description: Build controller program.\n      operationId: BuildControllerProgram\n      parameters:\n        - in: path\n          name: controllerId\n          schema:\n            type: string\n          required: true\n          description: Id of controller.\n      requestBody:\n        required: false\n        content:\n          application/json:\n            schema:\n             $ref: '#/components/schemas/BuildParameters'\n      responses:\n        '202':\n          description: \"Controller program build request accepted.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Process'\n        '404':\n          description: \"Controller with that Id was not found.\"\n        '409':\n          description: \"Controller is locked by another task.\"\n\n  /controllers/{controllerId}/clean:\n    post:\n      summary: Clean controller program.\n      description: Clean controller program.\n      operationId: CleanControllerProgram\n      parameters:\n        - in: path\n          name: controllerId\n          schema:\n            type: string\n          required: true\n          description: Id of controller.\n      responses:\n        '200':\n          description: \"Controller program successfully cleaned.\"\n        '404':\n          description: \"Controller with that Id was not found.\"\n\n  /controllers/{controllerId}/log-file:\n    patch:\n      summary: Add an entry to the log file.\n      description: Add an entry to the log file.\n      operationId: AddLogEntry\n      parameters:\n        - in: path\n          name: controllerId\n          schema:\n            type: string\n          required: true\n          description: Id of controller.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n             $ref: '#/components/schemas/LogEntry'\n      responses:\n        '200':\n          description: \"Log entry successfully added.\"\n        '404':\n          description: \"Controller with that Id was not found.\"\n\n  /controllers/{controllerId}/fuppages:\n    get:\n      summary: Returns the list of fuppages of a controller.\n      description: Returns the list of fuppages of a controller.\n      operationId: GetFupPages\n      parameters:\n        - in: path\n          name: controllerId\n          schema:\n            type: string\n          required: true\n          description: Id of controller.\n      responses:\n        '200':\n          description: A JSON object with a list of fuppages.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FupPages'\n        '404':\n          description: \"Controller with that Id was not found.\"\n\n    post:\n      summary: Insert fup page/macro.\n      description: Insert fup page/macro.\n      operationId: InsertFupPage\n      parameters:\n        - in: path\n          name: controllerId\n          schema:\n            type: string\n          required: true\n          description: Id of controller.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n             $ref: '#/components/schemas/FupPageInfo'\n      responses:\n        '200':\n          description: A JSON object with fuppage info.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FupPageInfo'\n        '400':\n          description: \"Fup page infos contain invalid parameters.\"\n        '404':\n          description: \"Controller or fup page with that Id was not found.\"\n        '500':\n          description: \"Something went wrong while inserting the fup page.\"\n\n  /fuppages/{fupPageId}:\n    get:\n      summary: Returns the info for a FUP page.\n      description: Returns the info for a FUP page.\n      operationId: GetFupPageInfo\n      parameters:\n        - in: path\n          name: fupPageId\n          schema:\n            type: string\n          required: true\n          description: Id of FUP page.\n      responses:\n        '200':\n          description: A JSON object with fuppage info.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FupPageInfo'\n        '404':\n          description: \"Fup page with that Id was not found.\"\n\n    patch:\n      summary: Changes the infos of a FUP page. Only change of macro status supported for now.\n      description: Changes the infos of a FUP page. Only change of macro status supported for now.\n      operationId: SetFupPageInfo\n      parameters:\n        - in: path\n          name: fupPageId\n          schema:\n            type: string\n          required: true\n          description: Id of FUP page.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n             $ref: '#/components/schemas/FupPageInfo'\n      responses:\n        '200':\n          description: A JSON object with fuppage info.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FupPageInfo'\n        '400':\n          description: \"Fup page infos contain invalid parameters.\"\n        '404':\n          description: \"Fup page with that Id was not found.\"\n\n    delete:\n      summary: Deletes a FUP page.\n      description: Deletes a FUP page.\n      operationId: DeleteFupPage\n      parameters:\n        - in: path\n          name: fupPageId\n          schema:\n            type: string\n          required: true\n          description: Id of FUP page.\n      responses:\n        '200':\n          description: \"FUP page successfully deleted.\"\n        '404':\n          description: \"Fup page with that Id was not found.\"\n          \n  /fuppages/{fupPageId}/update-macro:\n    post:\n      summary: Updates a macro.\n      description: Updates a macro.\n      operationId: UpdateMacro\n      parameters:\n        - in: path\n          name: fupPageId\n          schema:\n            type: string\n          required: true\n          description: Id of FUP page.\n      responses:\n        '200':\n          description: \"Macro successfully updated.\"\n        '404':\n          description: \"Fup page with that Id was not found.\"\n        '500':\n          description: \"Something went wrong while updating the macro.\"\n\n  /fuppages/{fupPageId}/definitions:\n    get:\n      summary: Returns the definitions of a macro.\n      description: Returns the definitions of a macro.\n      operationId: GetDefinitions\n      parameters:\n        - in: path\n          name: fupPageId\n          schema:\n            type: string\n          required: true\n          description: Id of fup page/macro.\n      responses:\n        '200':\n          description: A JSON object with list of definitions.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Definitions'\n        '404':\n          description: \"Fup page with that Id was not found.\"\n        '500':\n          description: \"Something went wrong while getting the definitions.\"\n\n    patch:\n      summary: Sets definitions of a macro.\n      description: Sets definitions of a macro.\n      operationId: SetDefinitions\n      parameters:\n        - in: path\n          name: fupPageId\n          schema:\n            type: string\n          required: true\n          description: Id of macro.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n             $ref: '#/components/schemas/Definitions'\n      responses:\n        '200':\n          description: \"Definitions successfully set.\"\n        '404':\n          description: \"Fup page with that Id was not found.\"\n        '500':\n          description: \"Something went wrong while setting the definitions.\"\n\n  /processes/{processId}:\n    get:\n      summary: Return the status of a long running process.\n      description: Return the status of a long running process.\n      operationId: GetProcessStatus\n      parameters:\n        - in: path\n          name: processId\n          schema:\n            type: string\n          required: true\n          description: Id of process.\n      responses:\n        '202':\n          description: \"Process is still running\"\n        '302':\n          description: \"Process has finished\"\n        '404':\n          description: \"Process with that Id was not found.\"\n",
      "url": "http://127.0.0.1:8080/open_fxl_api.yaml",
      "output": null,
      "newLineBehavior": "Auto"
    }
  },
  "codeGenerators": {
    "openApiToCSharpClient": {
      "clientBaseClass": null,
      "configurationClass": null,
      "generateClientClasses": true,
      "generateClientInterfaces": false,
      "clientBaseInterface": null,
      "injectHttpClient": true,
      "disposeHttpClient": false,
      "protectedMethods": [],
      "generateExceptionClasses": true,
      "exceptionClass": "ApiException",
      "wrapDtoExceptions": true,
      "useHttpClientCreationMethod": false,
      "httpClientType": "System.Net.Http.HttpClient",
      "useHttpRequestMessageCreationMethod": false,
      "useBaseUrl": true,
      "generateBaseUrlProperty": true,
      "generateSyncMethods": false,
      "exposeJsonSerializerSettings": false,
      "clientClassAccessModifier": "public",
      "typeAccessModifier": "public",
      "generateContractsOutput": false,
      "contractsNamespace": null,
      "contractsOutputFilePath": null,
      "parameterDateTimeFormat": "s",
      "parameterDateFormat": "yyyy-MM-dd",
      "generateUpdateJsonSerializerSettingsMethod": true,
      "useRequestAndResponseSerializationSettings": false,
      "serializeTypeInformation": false,
      "queryNullValue": "",
      "className": "{controller}Client",
      "operationGenerationMode": "MultipleClientsFromOperationId",
      "additionalNamespaceUsages": [],
      "additionalContractNamespaceUsages": [],
      "generateOptionalParameters": true,
      "generateJsonMethods": true,
      "enforceFlagEnums": false,
      "parameterArrayType": "System.Collections.Generic.IEnumerable",
      "parameterDictionaryType": "System.Collections.Generic.IDictionary",
      "responseArrayType": "System.Collections.Generic.ICollection",
      "responseDictionaryType": "System.Collections.Generic.IDictionary",
      "wrapResponses": true,
      "wrapResponseMethods": [
        "Client.GetProcessStatus",
        "Client.AddLogEntry"
      ],
      "generateResponseClasses": true,
      "responseClass": "SwaggerResponse",
      "namespace": "FxlApiV1",
      "requiredPropertiesMustBeDefined": true,
      "dateType": "System.DateTimeOffset",
      "jsonConverters": null,
      "anyType": "object",
      "dateTimeType": "System.DateTimeOffset",
      "timeType": "System.TimeSpan",
      "timeSpanType": "System.TimeSpan",
      "arrayType": "System.Collections.Generic.ICollection",
      "arrayInstanceType": "System.Collections.ObjectModel.Collection",
      "dictionaryType": "System.Collections.Generic.IDictionary",
      "dictionaryInstanceType": "System.Collections.Generic.Dictionary",
      "arrayBaseType": "System.Collections.ObjectModel.Collection",
      "dictionaryBaseType": "System.Collections.Generic.Dictionary",
      "classStyle": "Poco",
      "generateDefaultValues": true,
      "generateDataAnnotations": true,
      "excludedTypeNames": [],
      "excludedParameterNames": [],
      "handleReferences": false,
      "generateImmutableArrayProperties": false,
      "generateImmutableDictionaryProperties": false,
      "jsonSerializerSettingsTransformationMethod": null,
      "inlineNamedArrays": false,
      "inlineNamedDictionaries": false,
      "inlineNamedTuples": true,
      "inlineNamedAny": false,
      "generateDtoTypes": true,
      "generateOptionalPropertiesAsNullable": false,
      "generateNullableReferenceTypes": false,
      "templateDirectory": null,
      "typeNameGeneratorType": null,
      "propertyNameGeneratorType": null,
      "enumNameGeneratorType": null,
      "serviceHost": null,
      "serviceSchemes": null,
      "output": "Client/WebApiClient.cs",
      "newLineBehavior": "Auto"
    }
  }
}